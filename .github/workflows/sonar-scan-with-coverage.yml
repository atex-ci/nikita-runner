name: sonar-scan-with-coverage

on:  
  workflow_dispatch:
    inputs:      
      REPOSITORY:
        description: 'Repository to analyze (e.g. nikita)'
        default: 'nikita' #
        type: string
      GIT_BRANCH:
        description: 'branch to clone'     
        required: true
        default: 'main'
      PROJECT_KEY:
        description: 'Sonarqube Project Key'     
        required: true
        default: 'mytype'

jobs:
  sonarqube:
    name: Sonarqube Scan
    runs-on: ubuntu-latest
    permissions: read-all
    env:
      COVERAGE_EXCLUDE_PATHS: "*/shared/build/*|*/.nx/*|*/node_modules/.cache/nx/*"
    steps:
      - name: checkout
        run: |
          pwd
          git config --global http.sslverify false
          git clone --branch "${{ github.event.inputs.GIT_BRANCH}}" "https://${{ github.repository_owner }}:${{ secrets.GH_PASSWORD }}@github.com/atex-ci/nikita.git" .
          ls -la

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Setup pnpm
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        id: pnpm-install
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      
      - name: Restore cached pnpm dependencies
        id: cache-dependencies-restore
        uses: actions/cache/restore@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
      
      - name: Install dependencies
        run: pnpm install
      
      # Security audit (async)
      - name: Security Audit (async)
        run: |
          (
          echo "üîç Running security audit..."
          pnpm audit --audit-level moderate > audit_text.txt 2>&1 || true
          pnpm audit --json --audit-level moderate > audit.json 2>&1 || true

          # Create HTML report
          echo "<!DOCTYPE html>" > dependency-check-report.html
          echo "<html><head><title>Security Audit Report</title></head>" >> dependency-check-report.html
          echo "<body style='font-family: Arial; margin: 20px;'>" >> dependency-check-report.html
          echo "<h1>üîí Security Audit Report</h1>" >> dependency-check-report.html
          echo "<p><strong>Generated:</strong> $(date)</p>" >> dependency-check-report.html
          echo "<p><strong>Severity Level:</strong> moderate and above</p>" >> dependency-check-report.html

          # Parse JSON audit results
          if [ -f audit.json ] && [ -s audit.json ]; then
              node -e "
              const fs = require('fs');
              let data;
              try {
                  data = JSON.parse(fs.readFileSync('audit.json', 'utf8'));
              } catch (e) {
                  console.log('<div style=\"background: #f8d7da; border: 1px solid #f5c6cb; padding: 10px; margin: 10px 0; border-radius: 5px;\">');
                  console.log('<strong>‚ùå ERROR:</strong> Failed to parse audit.json</div>');
                  process.exit(0);
              }
              
              // Try different possible structure formats
              let vulns = {};
              let vulnCount = 0;
              
              if (data.advisories) {
                  vulns = data.advisories;
                  vulnCount = Object.keys(vulns).length;
              } else if (data.vulnerabilities) {
                  vulns = data.vulnerabilities;
                  vulnCount = Object.keys(vulns).length;
              } else if (data.metadata && data.metadata.vulnerabilities) {
                  // Handle new format where vulnerabilities count is in metadata
                  vulnCount = Object.values(data.metadata.vulnerabilities).reduce((sum, count) => sum + count, 0);
              }
              
              
              if (Object.keys(vulns).length > 0) {
                  console.log('<h2>üö® Found ' + Object.keys(vulns).length + ' vulnerabilities</h2>');
                  
                  // Sort vulnerabilities: critical first, then high, moderate, low
                  const severityOrder = { critical: 1, high: 2, moderate: 3, low: 4 };
                  const vulnArray = Object.entries(vulns)
                      .map(([id, v]) => ({ id, ...v, severity: (v.severity || 'unknown').toLowerCase() }))
                      .sort((a, b) => (severityOrder[a.severity] || 5) - (severityOrder[b.severity] || 5));
                  
                  vulnArray.forEach(v => {
                      const severityColor = v.severity === 'critical' ? '#6f42c1' : 
                                          v.severity === 'high' ? '#dc3545' : 
                                          v.severity === 'moderate' ? '#ffc107' : 
                                          v.severity === 'low' ? '#28a745' : '#6c757d';
                      
                      console.log('<div style=\"border: 1px solid #ddd; border-left: 4px solid ' + severityColor + '; padding: 15px; margin: 15px 0; background: #f8f9fa;\">');
                      console.log('<h3 style=\"margin-top: 0;\">' + (v.title || 'Unknown vulnerability') + '</h3>');
                      console.log('<p><strong>Severity:</strong> <span style=\"color: ' + severityColor + '; font-weight: bold;\">' + v.severity.toUpperCase() + '</span></p>');
                      console.log('<p><strong>Package:</strong> ' + (v.module_name || 'Unknown') + '</p>');
                      console.log('<p><strong>Vulnerable versions:</strong> ' + (v.vulnerable_versions || 'Unknown') + '</p>');
                      console.log('<p><strong>Patched versions:</strong> ' + (v.patched_versions || 'None available') + '</p>');
                      
                      // Show paths
                      if (v.findings && v.findings[0] && v.findings[0].paths) {
                          console.log('<p><strong>Paths:</strong></p><ul style=\"margin-left: 20px;\">');
                          v.findings[0].paths.forEach(path => {
                              console.log('<li style=\"font-family: monospace; font-size: 12px; margin: 2px 0;\">' + path.replace(/</g, '&lt;').replace(/>/g, '&gt;') + '</li>');
                          });
                          console.log('</ul>');
                      }
                      
                      if (v.overview) console.log('<p><strong>Description:</strong> ' + v.overview.replace(/</g, '&lt;').replace(/>/g, '&gt;') + '</p>');
                      if (v.recommendation) console.log('<p><strong>Recommendation:</strong> ' + v.recommendation + '</p>');
                      if (v.url) console.log('<p><strong>More info:</strong> <a href=\"' + v.url + '\" target=\"_blank\">' + v.url + '</a></p>');
                      console.log('</div>');
                  });
                  
              } else if (vulnCount > 0) {
                  console.log('<h2>üö® Found ' + vulnCount + ' vulnerabilities</h2>');
                  console.log('<p>Vulnerabilities detected but detailed information could not be parsed. Check the logs for detailed vulnerability information.</p>');
              } else {
                  console.log('<div style=\"background: #d1ecf1; border: 1px solid #bee5eb; padding: 15px; border-radius: 5px; color: #0c5460;\">');
                  console.log('<h2>‚úÖ No vulnerabilities found!</h2>');
                  console.log('<p>All dependencies are secure at the moderate level and above.</p>');
                  console.log('</div>');
              }
              " >> dependency-check-report.html
          else
              echo "<div style='background: #f8d7da; border: 1px solid #f5c6cb; padding: 15px; border-radius: 5px;'>" >> dependency-check-report.html
              echo "<h2>‚ùå No audit data available</h2>" >> dependency-check-report.html
              echo "<p>audit.json file not found or empty. The audit may have failed or produced no output.</p>" >> dependency-check-report.html
              echo "</div>" >> dependency-check-report.html
          fi

          echo "</body></html>" >> dependency-check-report.html
          echo "‚úÖ Security report generated: dependency-check-report.html"
          ) &
          echo $! > audit_pid.txt
        continue-on-error: true
      
      - name: Start client build (async)
        run: pnpm --filter client build &
        continue-on-error: true
      - name: Delete Previous Cache
        if: ${{ steps.cache-dependencies-restore.outputs.cache-hit }}
        continue-on-error: true
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete "${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}" --confirm
        env:
          GH_TOKEN: ${{ secrets.GH_PASSWORD }}          
      
      - name: Cache pnpm dependencies
        id: cache-dependencies-save
        uses: actions/cache/save@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
      
      - uses: nrwl/nx-set-shas@v3
      
      - name: Get Current Job Log URL
        uses: Tiryoh/gha-jobid-action@v0
        id: jobs
        with:
          github_token: ${{ secrets.GH_PASSWORD }}
          job_name: ${{ github.job }}

      - name: Modify nx.json to skip build dependencies for tests
        run: |
          # Backup original
          cp nx.json nx.json.backup
          
          # Remove "build" from test target dependencies, keep only "^build"
          jq '.targetDefaults.test.dependsOn = ["^build"]' nx.json > nx.json.tmp && mv nx.json.tmp nx.json
          
          echo "Modified nx.json test dependencies:"
          jq '.targetDefaults.test.dependsOn' nx.json

      - name: Run Tests
        run: |
          echo "üöÄ Running tests with cache..."
          
          # Run tests and capture output
          npx nx run-many --target=test --coverage --parallel 2>&1 | tee test_output.log
          
          # Check if there are failed tasks regardless of exit code
          if grep -q "Failed tasks:" test_output.log; then
            echo "‚ùå Some tests failed, analyzing which ones..."
            
            # Extract failed projects from the "Failed tasks:" section
            FAILED_PROJECTS=$(grep -A 50 "Failed tasks:" test_output.log | grep "^- .*:test$" | sed 's/^- \(.*\):test$/\1/' | tr '\n' ',' | sed 's/,$//')
            
            if [ -n "$FAILED_PROJECTS" ]; then
              echo "üîÑ Failed projects: $FAILED_PROJECTS"
              echo "üßπ Cleaning coverage directories for failed projects..."
              
              # Clean only coverage directories of failed projects
              IFS=',' read -ra PROJECTS <<< "$FAILED_PROJECTS"
              for project in "${PROJECTS[@]}"; do
                find . -path "*/$project/coverage" -type d -exec rm -rf {} + 2>/dev/null || true
              done
              
              echo "üîÑ Retrying failed projects without cache..."
              npx nx run-many --target=test --coverage --projects="$FAILED_PROJECTS" --skip-nx-cache
            else
              echo "‚ö†Ô∏è Could not identify failed projects, retrying all without cache..."
              find . -name "coverage" -type d -not -path "*/.nx/*" -not -path "*/node_modules/.cache/nx/*" -exec rm -rf {} + 2>/dev/null || true
              npx nx run-many --target=test --coverage --parallel --skip-nx-cache
            fi
          else
            echo "‚úÖ All tests passed on first attempt"
          fi
          
          # Cleanup
          rm -f test_output.log
      
      - name: Convert Istanbul to LCOV
        run: |
          npm install -g nyc
          
          echo "üîç Looking for coverage files to convert..."
          
          # Find coverage files, excluding .nx cache and unwanted directories
          COVERAGE_FILES=$(find . -name "coverage-final.json" -path "*/coverage/*" -not -path "*/.nx/*" -not -path "$COVERAGE_EXCLUDE_PATHS" 2>/dev/null || true)
          
          if [ -z "$COVERAGE_FILES" ]; then
            echo "‚ÑπÔ∏è No coverage-final.json files found, checking for other coverage formats..."
            find . -name "coverage" -type d -not -path "*/.nx/*" -not -path "*/node_modules/.cache/nx/*" -exec sh -c 'echo "üìÅ $1:"; ls -la "$1"' _ {} \;
          else
            echo "$COVERAGE_FILES" | while read -r coverage_file; do
              # Extract the project directory (parent of coverage directory)
              project_dir=$(dirname "$(dirname "$coverage_file")")
              echo "üîÑ Converting $project_dir..."
              
              if cd "$project_dir" 2>/dev/null; then
                if [ -f "coverage/coverage-final.json" ]; then
                  mkdir -p .nyc_output
                  cp coverage/coverage-final.json .nyc_output/out.json
                  nyc report --reporter=lcov --report-dir=coverage || echo "‚ö†Ô∏è Failed to convert $project_dir"
                else
                  echo "‚ö†Ô∏è coverage-final.json not found in $project_dir/coverage"
                fi
                cd - > /dev/null
              else
                echo "‚ùå Cannot access directory $project_dir"
              fi
            done
          fi
          
          # Check what lcov files we have
          echo "üìã Final LCOV files:"
          find . -name "lcov.info" -type f -not -path "*/.nx/*" -not -path "*/node_modules/.cache/nx/*" -exec sh -c 'echo "‚úÖ $1 ($(wc -l < "$1") lines)"' _ {} \; || echo "‚ùå No lcov.info files found"

      # Wait for security audit
      - name: Wait for Security Audit
        run: |
          if [ -f audit_pid.txt ]; then
            wait $(cat audit_pid.txt) || true
            rm audit_pid.txt
          fi
          [ -f dependency-check-report.html ] && echo "‚úÖ Security report ready" || echo "‚ö†Ô∏è No report found"

      - name: Coverage Report Summary
        run: |
          echo "üìä Coverage directories summary before SonarQube scan:"
          echo "==============================================="
          
          # Find coverage directories, excluding unwanted ones
          COVERAGE_DIRS=$(find . -name "coverage" -type d -not -path "$COVERAGE_EXCLUDE_PATHS" -not -path "*/.nx/*" -not -path "*/node_modules/.cache/nx/*" | sort)
          
          TOTAL_DIRS=$(echo "$COVERAGE_DIRS" | wc -l)
          
          if [ -z "$COVERAGE_DIRS" ]; then
            echo "‚ùå No coverage directories found"
          else
            echo "Found $TOTAL_DIRS coverage directories:"
            
            for coverage_dir in $COVERAGE_DIRS; do
              PROJECT_NAME=$(dirname "$coverage_dir" | sed 's|^\./||')
              FILE_COUNT=$(find "$coverage_dir" -type f | wc -l)
              DIR_SIZE=$(du -sh "$coverage_dir" 2>/dev/null | cut -f1 || echo "N/A")
              
              echo "  üìÅ $PROJECT_NAME/coverage:"
              echo "    - Files: $FILE_COUNT"
              echo "    - Size: $DIR_SIZE"
              
              # Check for specific important files
              if [ -f "$coverage_dir/lcov.info" ]; then
                LCOV_SIZE=$(wc -l < "$coverage_dir/lcov.info" 2>/dev/null || echo "0")
                echo "    - lcov.info: ‚úÖ ($LCOV_SIZE lines)"
              else
                echo "    - lcov.info: ‚ùå missing"
              fi
              
              if [ -f "$coverage_dir/coverage-final.json" ]; then
                echo "    - coverage-final.json: ‚úÖ"
              else
                echo "    - coverage-final.json: ‚ùå missing"
              fi
              
              echo ""
            done
          fi
          
          echo "==============================================="

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          # TODO: Temporarily disable coverage check
          SONAR_SCANNER_OPTS: >
            -Dsonar.projectKey=mytype
            -Dsonar.projectName=mytype
            -Dsonar.javascript.lcov.reportPaths=**/coverage/lcov.info
            -Dsonar.typescript.internal.maxNodeMemory=4096
            -Dsonar.coverage.new_code.disabled=true
            -Dsonar.coverage.overall.disabled=true
            -Dsonar.dependencyCheck.htmlReportPath=dependency-check-report.html

      - uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}