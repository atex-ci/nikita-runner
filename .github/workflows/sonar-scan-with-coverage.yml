name: sonar-scan-with-coverage

on:  
  workflow_dispatch:
    inputs:      
      REPOSITORY:
        description: 'Repository to analyze (e.g. nikita)'
        default: 'nikita' #
        type: string
      GIT_BRANCH:
        description: 'branch to clone'     
        required: true
        default: 'main'
      PROJECT_KEY:
        description: 'Sonarqube Project Key'     
        required: true
        default: 'mytype'

jobs:
  sonarqube:
    name: Sonarqube Scan
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - name: checkout
        run: |
          pwd
          git config --global http.sslverify false
          git clone --branch "${{ github.event.inputs.GIT_BRANCH}}" "https://${{ github.repository_owner }}:${{ secrets.GH_PASSWORD }}@github.com/atex-ci/nikita.git" .
          ls -la

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Setup pnpm
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        id: pnpm-install
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      
      - name: Restore cached pnpm dependencies
        id: cache-dependencies-restore
        uses: actions/cache/restore@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
      
      - name: Install dependencies
        run: pnpm install
      
      # Security audit (async)
      - name: Security Audit (async)
        run: |
          (
            echo "üîç Running security audit..."
            pnpm audit --audit-level moderate > audit_text.txt 2>&1 || true
            pnpm audit --json > audit.json 2>&1 || true
            
            # Create HTML report
            echo "<!DOCTYPE html>" > dependency-check-report.html
            echo "<html><head><title>Security Audit Report</title></head>" >> dependency-check-report.html
            echo "<body style='font-family: Arial; margin: 20px;'>" >> dependency-check-report.html
            echo "<h1>Security Audit Report</h1>" >> dependency-check-report.html
            echo "<p><strong>Generated:</strong> $(date)</p>" >> dependency-check-report.html
            echo "<p><strong>Severity Level:</strong> moderate and above</p>" >> dependency-check-report.html
            
            # Parse JSON audit results
            if [ -f audit.json ] && [ -s audit.json ]; then
              node -e "
                const fs = require('fs');
                try {
                  const data = JSON.parse(fs.readFileSync('audit.json', 'utf8'));
                  
                  // Try different possible structure formats
                  let vulns = {};
                  let vulnCount = 0;
                  
                  if (data.vulnerabilities) {
                    vulns = data.vulnerabilities;
                    vulnCount = Object.keys(vulns).length;
                  } else if (data.advisories) {
                    vulns = data.advisories;
                    vulnCount = Object.keys(vulns).length;
                  } else if (data.auditReportVersion && data.metadata) {
                    vulnCount = data.metadata.vulnerabilities || 0;
                  }
                  
                  // Debug: show what we found
                  console.log('<!-- DEBUG: Found ' + vulnCount + ' vulnerabilities in JSON -->');
                  console.log('<!-- DEBUG: Vulnerabilities object keys: ' + Object.keys(vulns).join(', ') + ' -->');
                  
                  if (vulnCount > 0 && Object.keys(vulns).length > 0) {
                    console.log('<h2>üö® Found ' + vulnCount + ' vulnerabilities</h2>');
                    
                    // Sort vulnerabilities by severity (critical first)
                    const severityOrder = { critical: 0, high: 1, moderate: 2, low: 3, info: 4, unknown: 5 };
                    const sortedVulns = Object.entries(vulns).sort(([,a], [,b]) => {
                      const severityA = a.severity || 'unknown';
                      const severityB = b.severity || 'unknown';
                      return (severityOrder[severityA] || 5) - (severityOrder[severityB] || 5);
                    });
                    
                    sortedVulns.forEach(([id, v]) => {
                      const severity = v.severity || 'unknown';
                      const severityColor = severity === 'critical' ? '#6f42c1' : 
                                          severity === 'high' ? '#dc3545' : 
                                          severity === 'moderate' ? '#ffc107' : 
                                          severity === 'low' ? '#28a745' : '#6c757d';
                      
                      console.log('<div style=\"border: 1px solid #ddd; border-left: 4px solid ' + severityColor + '; padding: 15px; margin: 15px 0; background: #f8f9fa;\">');
                      console.log('<h3 style=\"margin-top: 0;\">' + (v.title || v.advisory || 'Unknown vulnerability') + '</h3>');
                      console.log('<p><strong>Severity:</strong> <span style=\"color: ' + severityColor + '; font-weight: bold;\">' + severity.toUpperCase() + '</span></p>');
                      console.log('<p><strong>Package:</strong> ' + (v.module_name || v.name || 'Unknown') + '</p>');
                      console.log('<p><strong>Vulnerable versions:</strong> ' + (v.vulnerable_versions || v.range || 'Unknown') + '</p>');
                      console.log('<p><strong>Patched versions:</strong> ' + (v.patched_versions || v.fixAvailable || 'None available') + '</p>');
                      
                      // Add Paths field
                      if (v.findings && v.findings.length > 0) {
                        console.log('<p><strong>Paths:</strong></p>');
                        console.log('<ul style=\"margin-left: 20px;\">');
                        v.findings.forEach(finding => {
                          if (finding.paths) {
                            finding.paths.forEach(path => {
                              console.log('<li style=\"font-family: monospace; font-size: 12px; margin: 2px 0;\">' + path + '</li>');
                            });
                          }
                        });
                        console.log('</ul>');
                      } else if (v.via && Array.isArray(v.via)) {
                        console.log('<p><strong>Via:</strong> ' + v.via.join(' > ') + '</p>');
                      }
                      
                      if (v.overview) console.log('<p><strong>Description:</strong> ' + v.overview + '</p>');
                      if (v.recommendation) console.log('<p><strong>Recommendation:</strong> ' + v.recommendation + '</p>');
                      if (v.url) console.log('<p><strong>More info:</strong> <a href=\"' + v.url + '\" target=\"_blank\">' + v.url + '</a></p>');
                      console.log('</div>');
                    });
                  } else if (vulnCount > 0) {
                    console.log('<h2>üö® Found ' + vulnCount + ' vulnerabilities</h2>');
                    console.log('<p>Check the logs for detailed vulnerability information.</p>');
                  } else {
                    console.log('<div style=\"background: #d1ecf1; border: 1px solid #bee5eb; padding: 15px; border-radius: 5px; color: #0c5460;\">');
                    console.log('<h2>‚úÖ No vulnerabilities found!</h2>');
                    console.log('<p>All dependencies are secure at the moderate level and above.</p>');
                    console.log('</div>');
                  }
                } catch(e) {
                  console.log('<!-- DEBUG: JSON parsing failed with error: ' + e.message + ' -->');
                  // Fallback to text parsing if JSON fails
                  const textContent = fs.readFileSync('audit_text.txt', 'utf8');
                  if (textContent.includes('vulnerabilities found') || textContent.includes('critical') || textContent.includes('moderate')) {
                    console.log('<h2>üìã Audit Results</h2>');
                    console.log('<pre style=\"background: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto; white-space: pre-wrap;\">' + textContent + '</pre>');
                  } else {
                    console.log('<div style=\"background: #d1ecf1; border: 1px solid #bee5eb; padding: 15px; border-radius: 5px;\">');
                    console.log('<h2>‚ÑπÔ∏è Audit completed</h2>');
                    console.log('<p>No vulnerabilities found or audit completed successfully.</p>');
                    console.log('</div>');
                  }
                }
              " >> dependency-check-report.html
            else
              echo "<div style='background: #d1ecf1; border: 1px solid #bee5eb; padding: 15px; border-radius: 5px;'>" >> dependency-check-report.html
              echo "<h2>‚ÑπÔ∏è Audit completed</h2>" >> dependency-check-report.html
              echo "<p>No audit output captured or no vulnerabilities found.</p>" >> dependency-check-report.html
              echo "</div>" >> dependency-check-report.html
            fi
            
            echo "</body></html>" >> dependency-check-report.html
            echo "‚úÖ Security report generated"
            rm -f audit.json audit_text.txt
          ) &
          echo $! > audit_pid.txt
        continue-on-error: true
      
      - name: Start client build (async)
        run: pnpm --filter client build &
        continue-on-error: true
      - name: Delete Previous Cache
        if: ${{ steps.cache-dependencies-restore.outputs.cache-hit }}
        continue-on-error: true
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete "${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}" --confirm
        env:
          GH_TOKEN: ${{ secrets.GH_PASSWORD }}          
      
      - name: Cache pnpm dependencies
        id: cache-dependencies-save
        uses: actions/cache/save@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
      
      - uses: nrwl/nx-set-shas@v3
      
      - name: Get Current Job Log URL
        uses: Tiryoh/gha-jobid-action@v0
        id: jobs
        with:
          github_token: ${{ secrets.GH_PASSWORD }}
          job_name: ${{ github.job }}

      - name: Modify nx.json to skip build dependencies for tests
        run: |
          # Backup original
          cp nx.json nx.json.backup
          
          # Remove "build" from test target dependencies, keep only "^build"
          jq '.targetDefaults.test.dependsOn = ["^build"]' nx.json > nx.json.tmp && mv nx.json.tmp nx.json
          
          echo "Modified nx.json test dependencies:"
          jq '.targetDefaults.test.dependsOn' nx.json

      - name: Run Tests
        run: |
          echo "üöÄ Running tests with cache..."
          
          # Run tests and capture output
          npx nx run-many --target=test --coverage --parallel 2>&1 | tee test_output.log
          
          # Check if there are failed tasks regardless of exit code
          if grep -q "Failed tasks:" test_output.log; then
            echo "‚ùå Some tests failed, analyzing which ones..."
            
            # Extract failed projects from the "Failed tasks:" section
            FAILED_PROJECTS=$(grep -A 50 "Failed tasks:" test_output.log | grep "^- .*:test$" | sed 's/^- \(.*\):test$/\1/' | tr '\n' ',' | sed 's/,$//')
            
            if [ -n "$FAILED_PROJECTS" ]; then
              echo "üîÑ Failed projects: $FAILED_PROJECTS"
              echo "üßπ Cleaning coverage directories for failed projects..."
              
              # Clean only coverage directories of failed projects
              IFS=',' read -ra PROJECTS <<< "$FAILED_PROJECTS"
              for project in "${PROJECTS[@]}"; do
                find . -path "*/$project/coverage" -type d -exec rm -rf {} + 2>/dev/null || true
              done
              
              echo "üîÑ Retrying failed projects without cache..."
              npx nx run-many --target=test --coverage --projects="$FAILED_PROJECTS" --skip-nx-cache
            else
              echo "‚ö†Ô∏è Could not identify failed projects, retrying all without cache..."
              find . -name "coverage" -type d -exec rm -rf {} + 2>/dev/null || true
              npx nx run-many --target=test --coverage --parallel --skip-nx-cache
            fi
          else
            echo "‚úÖ All tests passed on first attempt"
          fi
          
          # Cleanup
          rm -f test_output.log
      
      - name: Convert Istanbul to LCOV
        run: |
          npm install -g nyc
          
          # For each project
          for dir in adapters/desk-adapter adapters/wp-adapter apps/installer; do
            if [ -f "$dir/coverage/coverage-final.json" ]; then
              echo "Converting $dir..."
              cd "$dir"
              mkdir -p .nyc_output
              cp coverage/coverage-final.json .nyc_output/out.json
              nyc report --reporter=lcov --report-dir=coverage
              cd - > /dev/null
            fi
          done
          
          # Check
          find . -name "lcov.info" -type f

      # Wait for security audit
      - name: Wait for Security Audit
        run: |
          if [ -f audit_pid.txt ]; then
            wait $(cat audit_pid.txt) || true
            rm audit_pid.txt
          fi
          [ -f dependency-check-report.html ] && echo "‚úÖ Security report ready" || echo "‚ö†Ô∏è No report found"

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          # TODO: Temporarily disable coverage check
          SONAR_SCANNER_OPTS: >
            -Dsonar.projectKey=mytype
            -Dsonar.projectName=mytype
            -Dsonar.javascript.lcov.reportPaths=**/coverage/lcov.info
            -Dsonar.coverage.new_code.disabled=true
            -Dsonar.coverage.overall.disabled=true
            -Dsonar.dependencyCheck.htmlReportPath=dependency-check-report.html

      - uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}