name: multi-deploy

on:
  workflow_dispatch:
    inputs:
      env_list:
        description: 'customer ids to deploy (comma-separated, no spaces)'
        required: true
        default: ''
      branch:
        description: 'Git branch'
        required: true
        default: 'main'
      git_hash:
        description: 'Git commit hash'
        required: true
        default: ''
      operation:
        type: choice
        required: true
        description: action to perform (full=test & deploy on dev, deploy=build & deploy, upgrade=in place upgrade)
        default: deploy
        options: 
        - deploy
        - upgrade
        
jobs:
  deploy-sequentially:
    runs-on: ubuntu-latest
    steps:
      
      - name: checkout mytype
        run: |
          pwd
          git config --global http.sslverify false
          git clone --branch "${{ github.event.inputs.branch}}" "https://${{ github.repository_owner }}:${{ secrets.GH_PASSWORD }}@github.com/atex-ci/nikita.git" .
          ls -la

      - name: Make scripts executable
        run: |
          chmod +x shared/build/scripts/pipeline-utils/parallel-upgrade.sh
          chmod +x shared/build/scripts/pipeline-utils/sequential-deploy.sh

      - name: Process deployments
        id: deploy-loop
        run: |
          # Get the list of environments
          ENV_LIST="${{ github.event.inputs.env_list }}"
          BRANCH="${{ github.event.inputs.branch }}"
          GIT_HASH="${{ github.event.inputs.git_hash }}"
          OPERATION="${{ github.event.inputs.operation }}"
          
          # Split into array
          IFS=',' read -ra ENVS <<< "$ENV_LIST"
          
          # Initialize arrays for completed and pending
          COMPLETED=()
          PENDING=("${ENVS[@]}")
          
          echo "Starting deployments of ${#ENVS[@]} environments with operation: $OPERATION"
          echo "Full environment list: $ENV_LIST"
          
          # FIRST: Update gist with all environments as pending
          PENDING_STR=$(IFS=,; echo "${PENDING[*]}")
          COMPLETED_STR=""
          
          echo "Initial update - Setting all environments as pending"
          echo "Pending: $PENDING_STR"
          
          # Create payload file for initial update
          echo '{
            "ref": "'$BRANCH'",
            "inputs": {
              "completed_deploys": "'$COMPLETED_STR'",
              "pending_deploys": "'$PENDING_STR'",
              "branch": "'$BRANCH'",
              "git_hash": "'$GIT_HASH'"
            }
          }' > initial_payload.json

          cat initial_payload.json
          
          # Initial update of the gist
          curl -s -X POST \
            -H "Authorization: token $MY_GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/update-deploy-status.yml/dispatches" \
            -d @initial_payload.json
          
          # Wait briefly for the initial status update
          sleep 2
          
          # Check if we should run in parallel (for upgrades) or sequential
          if [ "$OPERATION" = "upgrade" ]; then
            echo "Executing parallel upgrade script..."
            ./shared/build/scripts/pipeline-utils/parallel-upgrade.sh "$ENV_LIST" "$BRANCH" "$GIT_HASH" "$MY_GITHUB_TOKEN"
            
            # Update final status - all environments are now completed
            COMPLETED=("${ENVS[@]}")
            PENDING=()
            COMPLETED_STR=$(IFS=,; echo "${COMPLETED[*]}")
            PENDING_STR=""
            
            echo "Final parallel update - All environments completed"
            echo "Completed: $COMPLETED_STR"
            echo "Pending: $PENDING_STR"
            
          else
            echo "Executing sequential deploy script..."
            ./shared/build/scripts/pipeline-utils/sequential-deploy.sh "$ENV_LIST" "$BRANCH" "$GIT_HASH" "$OPERATION" "$MY_GITHUB_TOKEN" "${{ github.repository }}"
            
            # For sequential, the final status is updated within the script
            # Set final status based on all environments
            COMPLETED=("${ENVS[@]}")
            PENDING=()
            COMPLETED_STR=$(IFS=,; echo "${COMPLETED[*]}")
            PENDING_STR=""
          fi
          
          # Final status update (common for both parallel and sequential)
          echo "Final status update..."
          
          echo '{
            "ref": "'$BRANCH'",
            "inputs": {
              "completed_deploys": "'$COMPLETED_STR'",
              "pending_deploys": "'$PENDING_STR'",
              "branch": "'$BRANCH'",
              "git_hash": "'$GIT_HASH'"
            }
          }' > final_payload.json

          cat final_payload.json
          
          # Final update of the gist
          curl -s -X POST \
            -H "Authorization: token $MY_GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/update-deploy-status.yml/dispatches" \
            -d @final_payload.json
          
          echo "All deployments have been completed and status has been finalized!"
        env:
          MY_GITHUB_TOKEN: ${{ secrets.GH_PASSWORD }}