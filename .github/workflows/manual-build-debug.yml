name: manual-build debug

on:  
  workflow_dispatch:
    inputs:
      GIT_BRANCH:
        description: 'branch to clone'     
        required: true
        default: 'main'
      ENVIRONMENT:
        description: 'deploy to'     
        required: true
        default: 'mytype-dev'
      OPERATION:
        type: choice
        description: 'action to perform (full=test & deploy on dev, deploy=build & deploy, upgrade=in place upgrade)'
        required: true
        default: 'full'
        options: 
          - full
          - deploy
          - upgrade

jobs:
  main:
    runs-on: ubuntu-latest
    env: # all these values are stored in the .env file used by the upgrade process
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      LOGTAIL_AUTH_TOKEN: ${{ secrets.LOGTAIL_AUTH_TOKEN }}
      CONVOX_TOKEN: ${{ secrets.CONVOX_TOKEN }}
      GH_REPO_OWNER: ${{ github.repository_owner }} 
      GH_PASSWORD: ${{ secrets.GH_PASSWORD }}
      DEFAULT_AWS_ACCESS_KEY_ID: ${{ secrets.DEFAULT_AWS_ACCESS_KEY_ID }}
      DEFAULT_AWS_SECRET_ACCESS_KEY: ${{ secrets.DEFAULT_AWS_SECRET_ACCESS_KEY }}
      
    steps:
      - name: checkout
        run: |
          pwd
          git config --global http.sslverify false
          git clone --branch "${{ github.event.inputs.GIT_BRANCH}}" "https://${{ github.repository_owner }}:${{ secrets.GH_PASSWORD }}@github.com/atex-ci/nikita.git" .
          ls -la
          
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        id: pnpm-install
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - name: Restore cached pnpm dependencies
        id: cache-dependencies-restore
        uses: actions/cache/restore@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
      - name: Install dependencies
        run: pnpm install
      - name: Delete Previous Cache
        if: ${{ steps.cache-dependencies-restore.outputs.cache-hit }}
        continue-on-error: true
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete "${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}" --confirm
        env:
          GH_TOKEN: ${{ secrets.GH_PASSWORD }}          
      - name: Cache pnpm dependencies
        id: cache-dependencies-save
        uses: actions/cache/save@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
      - uses: nrwl/nx-set-shas@v3
      
      - name: Get Current Job Log URL
        uses: Tiryoh/gha-jobid-action@v0
        id: jobs
        with:
          github_token: ${{ secrets.GH_PASSWORD }}
          job_name: ${{ github.job }}

      - name: ensure aws cli is present
        run: |
          aws --version

      - name: authenticate aws cli
        run: |
          aws configure set aws_access_key_id "${{ secrets.DEFAULT_AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.DEFAULT_AWS_SECRET_ACCESS_KEY }}"

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3      
      
      # export any variables needed for the build script before running it
      - name: BUILD
        run: |
          export GH_PASSWORD="${{ secrets.GH_PASSWORD }}"
          export DEFAULT_AWS_ACCESS_KEY_ID="$DEFAULT_AWS_ACCESS_KEY_ID"
          export DEFAULT_AWS_SECRET_ACCESS_KEY="$DEFAULT_AWS_SECRET_ACCESS_KEY"
          ./shared/build/boot.sh "${{ github.event.inputs.GIT_BRANCH}}" "${{ steps.jobs.outputs.html_url }}" "${{ github.event.inputs.ENVIRONMENT }}" "${{ secrets.SALT }}" "${{ github.event.inputs.OPERATION }}"
