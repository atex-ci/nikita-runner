name: sonar-scan

on:  
  workflow_dispatch:
    inputs:      
      REPOSITORY:
        description: 'Repository to analyze (e.g. nikita)'
        default: 'nikita' #
        type: string
      GIT_BRANCH:
        description: 'branch to clone'     
        required: true
        default: 'main'
      PROJECT_KEY:
        description: 'Sonarqube Project Key'     
        required: true
        default: 'mytype'

jobs:
  sonarqube:
    name: Sonarqube Scan
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - name: checkout
        run: |
          pwd
          git config --global http.sslverify false
          git clone --branch "${{ github.event.inputs.GIT_BRANCH}}" "https://${{ github.repository_owner }}:${{ secrets.GH_PASSWORD }}@github.com/atex-ci/nikita.git" .
          ls -la

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Setup Java 17 for SonarQube Scanner
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Setup .NET to avoid Assembly Analyzer errors
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      # Setup Java 17 for SonarQube Scanner
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Setup .NET to avoid Assembly Analyzer errors
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
      # Setup pnpm
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        id: pnpm-install
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      
      - name: Restore cached pnpm dependencies
        id: cache-dependencies-restore
        uses: actions/cache/restore@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Delete Previous Cache
        if: ${{ steps.cache-dependencies-restore.outputs.cache-hit }}
        continue-on-error: true
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete "${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}" --confirm
        env:
          GH_TOKEN: ${{ secrets.GH_PASSWORD }}          
      
      - name: Cache pnpm dependencies
        id: cache-dependencies-save
        uses: actions/cache/save@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
      
      - uses: nrwl/nx-set-shas@v3
      
      - name: Get Current Job Log URL
        uses: Tiryoh/gha-jobid-action@v0
        id: jobs
        with:
          github_token: ${{ secrets.GH_PASSWORD }}
          job_name: ${{ github.job }}

      # Build the project
      - name: Build Project
        run: ./shared/build/scripts/pipeline-utils/pnpm-build.sh

      # Setup SonarQube Scanner - UPDATED VERSION
      - name: Setup SonarQube Scanner
        run: |
          SONAR_SCANNER_VERSION="5.0.1.3006"
          wget "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip"
          unzip "sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip"
          sudo mv "sonar-scanner-${SONAR_SCANNER_VERSION}-linux" /opt/sonar-scanner
          sudo ln -s /opt/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner

      # Cache OWASP Dependency Check - USING STABLE VERSION
      - name: Cache OWASP Dependency Check
        uses: actions/cache@v3
        with:
          path: |
            dependency-check
            ~/.gradle/dependency-check-data
          key: ${{ runner.os }}-owasp-dc-8.4.3-stable
          restore-keys: |
            ${{ runner.os }}-owasp-dc-

      # Setup OWASP Dependency Check - USING STABLE VERSION
      - name: Setup OWASP Dependency Check
        run: |
          if [ ! -d "dependency-check" ]; then
            OWASP_DC_VERSION="8.4.3"
            wget "https://github.com/jeremylong/DependencyCheck/releases/download/v${OWASP_DC_VERSION}/dependency-check-${OWASP_DC_VERSION}-release.zip"
            unzip "dependency-check-${OWASP_DC_VERSION}-release.zip"
            chmod +x dependency-check/bin/dependency-check.sh
          fi

      # Run OWASP Dependency Check - SIMPLIFIED FOR VERSION 8.4.3
      - name: Run OWASP Dependency Check
        run: |
          mkdir -p reports

          # Check if suppression file exists
          SUPPRESSION_FLAG=""
          if [ -f "dependency-check-suppressions.xml" ]; then
            SUPPRESSION_FLAG="--suppression dependency-check-suppressions.xml"
          fi

          echo "Running OWASP Dependency Check 8.4.3 with basic configuration"
          
          ./dependency-check/bin/dependency-check.sh \
            --project "MyType Security Scan" \
            --scan . \
            --exclude "**/node_modules/**" \
            --exclude "**/.pnpm/**" \
            --exclude "**/dist/**" \
            --exclude "**/build/**" \
            --exclude "**/coverage/**" \
            --exclude "**/apps/wordpress/**" \
            --exclude "**/lambdas/mytype-installer-lambda/**" \
            --format JSON \
            --format HTML \
            --out reports/ \
            --data dependency-check-data \
            $SUPPRESSION_FLAG

      # Verify OWASP Reports were generated
      - name: Verify OWASP Reports
        run: |
          echo "Files in reports directory:"
          ls -la reports/
          
          if [ -f "reports/dependency-check-report.json" ]; then
            echo "✅ JSON report generated successfully"
            echo "JSON report size: $(wc -c < reports/dependency-check-report.json) bytes"
          else
            echo "❌ JSON report missing"
            exit 1
          fi
          
          if [ -f "reports/dependency-check-report.html" ]; then
            echo "✅ HTML report generated successfully"
          else
            echo "❌ HTML report missing"
            exit 1
          fi

      # Upload reports to S3
      - name: Upload reports to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --delete
        env:
          AWS_S3_BUCKET: 'mytype-sonar-reports'
          AWS_ACCESS_KEY_ID: ${{ secrets.DEFAULT_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEFAULT_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'eu-west-1'
          SOURCE_DIR: 'reports'
          DEST_DIR: ''

      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_SCANNER_OPTS: "-Dsonar.projectKey=${{ inputs.PROJECT_KEY }} -Dsonar.dependencyCheck.jsonReportPath=reports/dependency-check-report.json -Dsonar.dependencyCheck.htmlReportPath=reports/dependency-check-report.html"
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}