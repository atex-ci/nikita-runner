name: manual-build

on:  
  workflow_dispatch:
    inputs:
      GIT_BRANCH:
        description: 'branch to clone'     
        required: true
        default: 'main'
      ENVIRONMENT:
        description: 'deploy to'     
        required: true
        default: 'demo1'
      SKIP_TESTS:
        description: 'Skip test phase'     
        required: true
        default: 'false'

jobs:
  main:
    runs-on: ubuntu-latest
    env:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      LOGTAIL_AUTH_TOKEN: ${{ secrets.LOGTAIL_AUTH_TOKEN }}
      CONVOX_TOKEN: ${{ secrets.CONVOX_TOKEN }}
      
    steps:
      - name: checkout
        run: |
          pwd
          git config --global http.sslverify false
          git clone --branch "${{ github.event.inputs.GIT_BRANCH}}" "https://${{ github.repository_owner }}:${{ secrets.GH_PASSWORD }}@github.com/atex-ci/nikita.git" .
          ls -la
          
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        id: pnpm-install
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - name: Restore cached pnpm dependencies
        id: cache-dependencies-restore
        uses: actions/cache/restore@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
      - name: Install dependencies
        run: pnpm install
      - name: Delete Previous Cache
        if: ${{ steps.cache-dependencies-restore.outputs.cache-hit }}
        continue-on-error: true
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete "${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}" --confirm
        env:
          GH_TOKEN: ${{ secrets.GH_PASSWORD }}          
      - name: Cache pnpm dependencies
        id: cache-dependencies-save
        uses: actions/cache/save@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
      - uses: nrwl/nx-set-shas@v3
      
      - name: Get Current Job Log URL
        uses: Tiryoh/gha-jobid-action@v0
        id: jobs
        with:
          github_token: ${{ secrets.GH_PASSWORD }}
          job_name: ${{ github.job }}

      - name: ensure aws cli is present
        run: |
          aws --version

      - name: authenticate aws cli
        run: |
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY}}"
      
      - name: BUILD
        run: |
          export SONAR_TOKEN="${{ secrets.SONAR_TOKEN }}"
          export SONAR_HOST_URL="${{ secrets.SONAR_HOST_URL }}"
          export MY_SONAR_PROJECT_KEY="mytype-local"
          ./shared/build/boot.sh "${{ github.event.inputs.GIT_BRANCH}}" "${{ steps.jobs.outputs.html_url }}" "${{ github.event.inputs.ENVIRONMENT }}" "${{ secrets.SALT }}" "${{ github.event.inputs.SKIP_TESTS}}"

  sonarqube:
    name: Sonarqube Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.SKIP_TESTS != 'true' }}
    permissions: read-all
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_SCANNER_OPTS: "-Dsonar.projectKey=mytype-local-wrong"
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} e